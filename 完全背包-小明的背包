// https://www.lanqiao.cn/problems/1175/learning/?page=1&first_category_id=1&name=%E5%B0%8F%E6%98%8E%E7%9A%84%E8%83%8C%E5%8C%852

#include <iostream>
#include <cstring>
using namespace std;

#define maxn 1001

int volume[maxn];
int value[maxn];
int dp[maxn][maxn];

void ksnappack(int n, int cap) {
  for (int i = 1; i <=cap; ++i) {
    dp[0][i] = 0;
  }

  for( int i = 1; i <= n; ++i) {
    for (int j = 1; j <= cap; ++j) {
      // 注意这里是0开始，表示使用第i个物品可能出现的情况
      for (int k = 0; k <= j / volume[i]; ++k) {
        dp[i][j] = max(dp[i][j], dp[i - 1][j - k * volume[i]] + k * value[i]);
      }
    }
  }
}

int main()
{
  int n, v;
  cin >> n >> v;
  for (int i = 1;i <= n; ++i) {
    cin >> volume[i];
    cin >> value[i];
  }
  // memset(dp, 0, sizeof(dp));
  ksnappack(n, v);
  int ans = 0;
  for (int j = 1; j <= v; ++j) {
    ans = max(ans, dp[n][j]);
  }
  cout << ans << endl;
  return 0;
}
