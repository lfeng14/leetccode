https://www.lanqiao.cn/problems/1337/learning/?page=1&first_category_id=1&name=%E8%B5%B0%E5%A4%9A%E8%BF%9C

#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

#define maxn 1000000

vector<int> edges[maxn];
int dp[maxn];
int indeg[maxn];
queue<int> q;
int dist[maxn];
int maxv = -1;
void topoSort(int n) {
    for (int i = 0; i < n; ++i) {
        if (!indeg[i]) {
            q.push(i);
        }
    }

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < edges[u].size(); ++i) {
            int v = edges[u][i];
            indeg[v]--;
          // 计算从入度为0的启动走过的最长路径
            dist[v] = max(dist[v], dist[u] + 1);
          // 入读为0，则入队列
            if (!indeg[v]) {
                q.push(v);
            }
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    memset(indeg, 0, sizeof(indeg));
    memset(dist, 0, size(dist));
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        edges[--u].push_back(--v);
      // 计算入度
        indeg[v]++;
    }
    topoSort(n);
    for (int i = 0; i < n; ++i) {
        maxv = max(maxv, dist[i]);
    }
    cout << maxv << endl;
    return 0;
}
