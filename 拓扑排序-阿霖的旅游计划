// https://www.lanqiao.cn/problems/5011/learning/?page=1&first_category_id=1&name=%E6%97%85%E6%B8%B8%E8%AE%A1%E5%88%92
// 整体还是使用拓扑排序的模板，这道题身体比较重要
// 题目虽然说有向图，但是不能从A[i] > A[j]，所以相当于有向图，所以构图时构建有向图
// 拓扑排序从入度为0的点开始遍历，因为这样保证从起点开始遍历
// 最后注意，最大魅力值超过INT_MAX，使用long long类型

#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

#define maxn 1000000

vector<int> edges[maxn];
int dp[maxn];
int indeg[maxn];
queue<int> q;
long long dist[maxn];
long long maxv = -1;
int privale[maxn];
void topoSort(int n) {
    for (int i = 0; i < n; ++i) {
        if (!indeg[i]) {
            q.push(i);
            dist[i] = privale[i];
        }
    }

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < edges[u].size(); ++i) {
            int v = edges[u][i];
            indeg[v]--;
            dist[v] = max(dist[v], dist[u] + privale[v]);
            if (!indeg[v]) {
                q.push(v);
            }
        }
    }
}

int main()
{
    int n;
    int m;
    cin >> n >> m;
    memset(indeg, 0, sizeof(indeg));
    memset(dist, 0, sizeof(dist));
    memset(privale,0, sizeof(privale));
    for (int i = 0; i < n; ++i) {
      cin >> privale[i];
    }
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        if (privale[u] > privale[v]) {
          edges[v].push_back(u);
          indeg[u]++;
        } else if (privale[u] < privale[v]) {
          edges[u].push_back(v);
          indeg[v]++;
        }
    }
    topoSort(n);
    for (int i = 0; i < n; ++i) {
        maxv = max(maxv, dist[i]);
    }
    cout << maxv << endl;
    return 0;
}
