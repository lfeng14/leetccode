// https://www.lanqiao.cn/problems/1515/learning/?page=1&first_category_id=1&tags=%E9%AB%98%E7%B2%BE%E5%BA%A6&tag_relation=intersection&sort=students_count&asc=0
// 先写主体逻辑，然后写需要的函数接口

#include <iostream>
#include <queue>
using namespace std;

template <class T>
struct Node {
	T val;
	Node<T>* pre;
	Node<T>* next;
};

template <class T>
class DoublyLinkedList {
private:
	int m_size = 0;
	Node<T>* head;
public:
	DoublyLinkedList() {
		m_size = 0;
		head = new Node<T>();
		head->pre = head;
		head->next = head;
	}
	~DoublyLinkedList() {
		while (head->next) {
			Node<T>* t = head->next;
			head->next = head->next->next;
			delete t;
		}
		m_size = 0;
	}
	void push_back(T val);
	void push_front(T val);
	void print();
	Node<T>* find(T val);
	void delete_node(Node<T>* t);
};

template<class T>
void DoublyLinkedList<T>::push_back(T val) {
	Node<T>* t = new Node<T>();
	t->val = val;
	t->pre = this->head->pre;
	t->next = this->head;
	this->head->pre = t;
	this->head->pre->next = t;
	m_size++;
}

template<class T>
void DoublyLinkedList<T>::push_front(T val) {
	Node<T>* t = new Node<T>();
	t->val = val;
	t->next = head->next;
	t->pre = head;
	head->next->pre = t;
	head->next = t;
	m_size++;
}

template<class T> 
void DoublyLinkedList<T>::print() {
	Node<T>* t = head->next;
	while (t != head) {
		cout << t->val << " ";
		t = t->next;
	}
	cout << endl;
}

template<class T>
Node<T>* DoublyLinkedList<T>::find(T val) {
	Node<T>* t = head->next;
	while (t != head) {
		if (t->val == val) {
			return t;
		}
		t = t->next;
	}
}

template<class T> 
void DoublyLinkedList<T>::delete_node(Node<T>* t) {
	t->pre->next = t->next;
	t->next->pre = t->pre;
	m_size--;
}

int main() {
	DoublyLinkedList<int>* s = new DoublyLinkedList<int>();
	int num = 10;
	while (num) {
		s->push_front(num);
		num--;
	}
	cin >> num;
	queue<int> q;
	while (num) {
		int target;
		cin >> target;
		q.push(target);
		num--;
	}
	while (!q.empty()) {
		int target;
		target = q.front();
		q.pop();
		Node<int>* t = s->find(target);
		s->delete_node(t);
		s->push_front(target);
		s->print();
		num--;
	}
	return 0;
}
