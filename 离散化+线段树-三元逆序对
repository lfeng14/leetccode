https://www.lanqiao.cn/problems/8584/learning/?page=1&first_category_id=1&tags=%E7%A6%BB%E6%95%A3%E5%8C%96&tag_relation=intersection&sort=pass_rate&asc=0
// 树状数组编号必须从1开始，因为需要计算lowbit

#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

class Dicretizer {
	vector<int> d;
public:
	//Dicretizer(int n) : d() {};
	void process() {
		sort(d.begin(), d.end());
		int last = 0;
		for (int i = 0; i < d.size(); ++i) {
			if (d[last] != d[i]) {
				d[++last] = d[i];
			}
		}
		d.resize(last + 1);
	};
	void adddata(int v) {
		d.push_back(v);
	}
	int getdata(int v) {
		int l = -1, r = d.size();
		while (l + 1 < r) {
			int mid = (l + r) >> 1;
			if (d[mid] >= v) {
				r = mid;
			}
			else {
				l = mid;
			}
		}
		if (r == d.size() || d[r] != v) {
			return -1;
		}
		return r;
	};
	int size() {
		return d.size();
	};
};

// 为了单点求值，所以数组为差分数组的前缀和
class fentree {
	// 也可以直接写long long m_tree[500001];
	vector<long long> m_tree;
public:
	fentree(int n) : m_tree(n + 1, 0) {
	};
	void update(int i, int v) {
		// 注意这里是n + 1大小，所以小于号
		while (i < m_tree.size()) {
			m_tree[i] += v;
			i += (-i) & i;
		}
	};
	long long query(int v) {
		long long sum = 0;
		// 树状数组必须从1开始
		while (v > 0) {
			sum += m_tree[v];
			v -= (-v) & v;
		}
		return sum;
	};
	long long query(int l, int r) {
		//cout << query(r) << "-" << query(l) << endl;
    // 离散化后元素范围是1 ~ n
		return query(r) - query(l);
	}
};
// 为什么需要使用离散化: 数组元素比数组长度大很多；这时你如果要用树状数组就很不划算
// 因为树状数组需要更新很多后续元素的前缀和；所以将元素范围缩小后，减少很多计算量
// 离散化对象内保存的还是原来的数组，但是返回排序的索引位置
int main()
{
//5 5
//1 5 4 2 3
//1 2 4 2
//2 3
//1 1 5 - 1
//1 3 5 7
//2 4
	int n, k;
	int a[1000001];
	int b[1000001];
	int c[1000001];
	cin >> n;
	Dicretizer d;
	fentree ft(1000000);
	for (int i = 1; i <= n; ++i) {
		cin >> a[i];
		d.adddata(a[i]);
	}
	d.process();
	for (int i = 1; i <= n; ++i) {
		// 离散化后，a[i] 范围是1 ~n; 
		a[i] = d.getdata(a[i]) + 1;
	}
	for (int i = 1; i <= n; ++i) {
		ft.update(a[i], 1);
    // 取比较小的元素个数
		b[i] = ft.query(a[i]-1);
	}
	fentree ftt(1000000);
	long long ans = 0;
	for (int i = n; i >= 1; --i) {
		ftt.update(a[i], 1);
		// 相乘容易越界，所以需要先转为long long
		ans += (long long)b[i] * ftt.query(a[i], n);
		// 最后结果取模
		ans = ans % 998244353;
	}
	cout << ans << endl;
	return 0;
}
