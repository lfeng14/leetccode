// https://leetcode.cn/problems/fpTFWP/description/

class Solution {
    int dp[200][200];
    int direction[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int dfs(vector<vector<int>>& matrix, int m, int n, int i, int j) {
        if (dp[i][j]) {
            return dp[i][j];
        }
        int maxv = 1;
        // 注意这里不能使用迭代变量i，否则会被覆盖
        for (int d = 0; d < 4; ++d) {
            int ii = i + direction[d][0];
            int jj = j + direction[d][1];

            if (ii >= m || ii < 0 || jj >= n || jj < 0) {
                continue;
            }
            if (matrix[i][j] >= matrix[ii][jj]) {
                continue;
            }
            maxv = max(maxv, 1 + dfs(matrix, m, n, ii, jj));
        }
        dp[i][j] = maxv;
        return maxv;
    }

public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                ans = max(ans, dfs(matrix, m, n, i, j));
            }
        }
        return ans;
    }
};
