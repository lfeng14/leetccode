// https://www.lanqiao.cn/problems/1207/learning/?page=1&first_category_id=1&tags=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97&tag_relation=intersection&sort=pass_rate&asc=0

#include <iostream>
#include <stack>
#include <vector>
// 注意使用双端队列
#include <deque>
using namespace std;
int a[1000000];
int main()
{
	int n, k;
	cin >> n >> k;
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	deque<int> q;
	// 求最小值
	vector<int> f(n);
	for (int i = 0; i < n; ++i) {
		// 超过窗口范围出队
		while (q.size() > 0 && ((i - q.front() + 1 > k))) {
			q.pop_front();
		}
		// 就近大于a[i]出队
		while (q.size() > 0 && (a[q.back()] >= a[i])) {
			q.pop_back();
		}
		q.push_back(i);
		f[i] = a[q.front()];
	}
	while (q.size()) {
		q.pop_back();
	}
	// 求最大值
	vector<int> g(n);
	for (int i = 0; i < n; ++i) {
		// 超过窗口范围出队
		while (q.size() > 0 && ((i - q.front() + 1 > k))) {
			q.pop_front();
		}
		// 就近小于a[i]出队
		while (q.size() > 0 && (a[q.back()] <= a[i])) {
			q.pop_back();
		}
		q.push_back(i);
		g[i] = a[q.front()];
	}
	int maxv = -1;
	for (int i = 0; i < n; i++) {
		maxv = max(maxv, g[i] - f[i]);
	}
	cout << maxv << endl;
	return 0;
}
