https://ufbva3m5zn.feishu.cn/mindnotes/HgSmbEqMQm5RfAng0WTcOQZEnJc

// 这道题的关键点：dp[i]，0开始，表示第i个元素结尾的数组切分个数；
// 第i个为终点的延申连续子数组，与前面的dp[j] 可以组成一个新的切分方式
-------------------|
-----------------|-|
----------------|--|
---------------|---|
...
|------------------|  // 这个场景不要忘了, 0到i组成连续子数组
#include <iostream>
#include <climits>
#include <vector>
#include <queue>
#include <cstring>
#include <cmath>
using namespace std;

#define maxn 10000
#define inf  1000000007 
int main()
{
	int n;
	cin >> n;
	int arr[maxn];
	int dp[maxn];
	memset(dp, 0, sizeof(dp));
	for (int i = 0; i < n; ++i) {
		cin >> arr[i];
	}
	// dp[i]，0开始，表示第i个元素结尾的数组切分个数；
	dp[0] = 1;
	for (int i = 1;i < n; ++i) {
		int maxv = 0;
		int minv = inf;
		for (int j = i; j >= 0; --j) {
			maxv = max(arr[j], maxv);
			minv = min(arr[j], minv);
			if (maxv - minv == i - j) {
				if (j == 0) {
					// 这里需要注意的点：整个也是一种切分方案
					dp[i] += 1;
				}
				else {
					dp[i] += dp[j - 1];
				}
				if (dp[i] >= inf) {
					dp[i] %= inf;
				}
			}
		}
 	}
	cout << dp[n - 1];
	return 0;
}
