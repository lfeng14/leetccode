// https://www.lanqiao.cn/problems/19875/learning/?page=1&first_category_id=1&tags=%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84&tag_relation=intersection&sort=students_count&asc=0
// 树状数组编号必须从1开始，因为需要计算lowbit

#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

class Dicretizer {
	vector<int> d;
public:
	//Dicretizer(int n) : d() {};
	void process() {
		sort(d.begin(), d.end());
		int last = 0;
		for (int i = 0; i < d.size(); ++i) {
			if (d[last] != d[i]) {
				d[++last] = d[i];
			}
		}
		d.resize(last + 1);
	};
	void adddata(int v) {
		d.push_back(v);
	}
// 这里的返回离散值，涉及二分查找找左边界
	int getdata(int v) {
		int l = -1, r = d.size();
		while (l + 1 < r) {
			int mid = (l + r) >> 1;
			if (d[mid] >= v) {
				r = mid;
			}
			else {
				l = mid;
			}
		}
		if (r == d.size() || d[r] != v) {
			return -1;
		}
		return r;
	};
	int size() {
		return d.size();
	};
};

// 为了单点求值，所以数组为差分数组的前缀和
class fentree {
	// 也可以直接写long long m_tree[500001];
	vector<long long> m_tree;
public:
	fentree(int n) : m_tree(n + 1, 0) {
	};
	void update(int i, int v) {
		// 注意这里是n + 1大小，所以小于号
		while (i < m_tree.size()) {
			m_tree[i] += v;
			i += (-i) & i;
		}
	};
	long long query(int v) {
		long long sum = 0;
		// 树状数组必须从1开始
		while (v > 0) {
			sum += m_tree[v];
			v -= (-v) & v;
		}
		return sum;
	};

};
int main()
{
//5 5
//1 5 4 2 3
//1 2 4 2
//2 3
//1 1 5 - 1
//1 3 5 7
//2 4
	int n, k;
	int a[1000001];
	int b[1000001];
	cin >> n;
	Dicretizer d;
	fentree ft(1000000);
	for (int i = 1; i <= n; ++i) {
		cin >> a[i];
		d.adddata(a[i]);
	}
	d.process();
	for (int i = 1; i <= n; ++i) {
    易错点：离散化范围下表从0开始
		a[i] = d.getdata(a[i]) + 1;
	}
	for (int i = n; i >= 1; --i) {
		b[i] = ft.query(a[i]-1);
		ft.update(a[i], 1);
	}
	long long ans = 0;
	for (int i = 1; i <= n; ++i) {
		ans += b[i];
	}
	cout << ans << endl;
	return 0;
}
